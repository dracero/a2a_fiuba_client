---
import AgentSelector from './AgentSelector.astro';
import MessagesArea from './MessagesArea.astro';
import InputArea from './InputArea.astro';
import TypingIndicator from './TypingIndicator.astro';
---

<div class="chat-container" id="chatContainer">
  <div id="agentsListModal" class="agents-modal" style="display:none;">
    <div class="agents-modal-content left-modal">
      <button id="closeAgentsListModal" type="button" class="close-modal-btn">Cerrar</button>
      <h2 style="margin-top:0;">Agentes registrados</h2>
      <div id="agentsList"></div>
    </div>
  </div>
  <div class="chat-header-row">
    <div class="dropdown-agents">
      <button id="dropdownAgentsBtn" class="dropdown-btn">Agentes</button>
    </div>
    <AgentSelector />
    <button id="createConversationBtn" class="dropdown-btn" style="margin-left:12px;background:#667eea;">+ Nueva conversación</button>
  </div>
  <form id="send-message-form" style="display:none"></form>
  <MessagesArea />
  <TypingIndicator />
  <InputArea />
</div>

<style>
  .chat-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: var(--glass-bg);
    border: 1px solid var(--border-color);
    border-radius: 24px;
    backdrop-filter: blur(20px);
    box-shadow: var(--shadow-glow);
    overflow: hidden;
    animation: slideUp 0.8s ease-out;
  }
  .chat-header-row {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 20px 0 20px;
    background: transparent;
  }
  .dropdown-agents {
    position: relative;
    display: flex;
    align-items: center;
  }
  .dropdown-btn {
    background: #e74c3c;
    color: #fff;
    border: none;
    border-radius: 6px;
    padding: 6px 12px;
    font-weight: bold;
    cursor: pointer;
    font-size: 1.2rem;
  }
  .dropdown-menu {
    display: none;
    position: absolute;
    left: 0;
    top: 110%;
    background: #fff;
    color: #222;
    min-width: 180px;
    border-radius: 8px;
    box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    z-index: 1001;
    padding: 8px 0;
  }
  .dropdown-menu button {
    width: 100%;
    background: none;
    border: none;
    color: #222;
    padding: 10px 18px;
    text-align: left;
    cursor: pointer;
    font-size: 1rem;
    border-radius: 0;
  }
  .dropdown-menu button:hover {
    background: #f2f2f2;
  }
  .dropdown-agents.open .dropdown-menu {
    display: block;
  }
  .agents-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0,0,0,0.7);
    z-index: 2000;
    box-sizing: border-box;
    align-items: flex-start;
    justify-content: flex-start;
    display: flex;
  }
  .agents-modal[style*="display: none"] {
    display: none !important;
  }
  .agents-modal-content.left-modal {
    max-width: 600px;
    width: 90vw;
    min-width: 260px;
    background: #fff;
    color: #222;
    border-radius: 12px;
    padding: 24px 32px 32px 32px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.25);
    position: relative;
    box-sizing: border-box;
    margin: 40px 0 0 10vw;
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }
  .close-modal-btn {
    position: absolute;
    left: 50%;
    top: 0;
    transform: translateX(-50%) translateY(-50%);
    background: #ff9800;
    color: #fff;
    border: none;
    border-radius: 20px;
    padding: 8px 28px;
    font-weight: bold;
    font-size: 1rem;
    cursor: pointer;
    z-index: 10;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    transition: background 0.2s;
  }
  .close-modal-btn:hover {
    background: #fb8c00;
  }
  @media (max-width: 700px) {
    .agents-modal-content.left-modal {
      max-width: 98vw;
      margin-left: 0;
      padding: 16px 6vw 24px 6vw;
    }
  }
  @media (max-width: 480px) {
    .agents-modal-content.left-modal {
      max-width: 100vw;
      min-width: 0;
      margin-left: 0;
      padding: 10px 2vw 16px 2vw;
    }
  }
</style>
<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    // --- Dropdown sólo para mostrar la lista ---
    const dropdownBtn = document.getElementById('dropdownAgentsBtn');
    const agentsListModal = document.getElementById('agentsListModal');
    const agentsList = document.getElementById('agentsList');
    dropdownBtn.addEventListener('click', async (e) => {
      e.stopPropagation();
      agentsListModal.style.display = 'flex';
      agentsList.innerHTML = '<p>Cargando agentes...</p>';
      const requestOptions = { method: "POST", redirect: "follow" };
      try {
        const res = await fetch('http://0.0.0.0:12000/agent/list', requestOptions);
        const text = await res.text();
        let agents;
        try { agents = JSON.parse(text); } catch (e) {
          agentsList.innerHTML = `<p>Respuesta inesperada del servidor:<br><pre>${text.replace(/</g,'&lt;')}</pre></p>`;
          return;
        }
        function findAgentsArray(obj) {
          if (Array.isArray(obj)) return obj;
          if (typeof obj === 'object' && obj !== null) {
            for (const key in obj) {
              if (Array.isArray(obj[key])) return obj[key];
              const found = findAgentsArray(obj[key]);
              if (found) return found;
            }
          }
          return null;
        }
        const agentsArr = findAgentsArray(agents);
        agentsList.innerHTML = '';
        if (Array.isArray(agentsArr) && agentsArr.length > 0) {
          agentsArr.forEach(agent => {
            agentsList.innerHTML += `
              <div class=\"agent-card\">
                <h3>${agent.name || 'Sin nombre'}</h3>
                <p>${agent.description || 'Sin descripción'}</p>
                <a href='${agent.url || '#'}' target='_blank'>${agent.url || 'Sin URL'}</a>
              </div>
            `;
          });
        } else {
          agentsList.innerHTML = `<p>No se encontraron agentes en la respuesta:<br><pre>${JSON.stringify(agents, null, 2)}</pre></p>`;
        }
      } catch (err) {
        agentsList.innerHTML = `<p>Error al cargar los agentes: ${err}</p>`;
      }
    });
    // Control robusto del modal de agentes
    if (!window._agentsModalInit) {
      window._agentsModalInit = true;
      const agentsListModal = document.getElementById('agentsListModal');
      const dropdownBtn = document.getElementById('dropdownAgentsBtn');
      const closeBtn = document.getElementById('closeAgentsListModal');
      if (dropdownBtn && agentsListModal && closeBtn) {
        dropdownBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          agentsListModal.style.display = 'flex';
        });
        closeBtn.addEventListener('click', () => {
          agentsListModal.style.display = 'none';
        });
        // Cerrar modal al hacer clic fuera del contenido
        agentsListModal.addEventListener('click', (e) => {
          if (e.target === agentsListModal) {
            agentsListModal.style.display = 'none';
          }
        });
      }
    }
    // --- Crear nueva conversación ---
    const createBtn = document.getElementById('createConversationBtn');
    if (createBtn) {
      createBtn.addEventListener('click', async () => {
        createBtn.disabled = true;
        createBtn.textContent = 'Creando...';
        try {
          const requestOptions = { method: "POST", redirect: "follow" };
          const res = await fetch("http://0.0.0.0:12000/conversation/create", requestOptions);
          const text = await res.text();
          let newId = '';
          try {
            const data = JSON.parse(text);
            newId = data.id || data.conversation_id || (data.result && (data.result.id || data.result.conversation_id)) || '';
          } catch {}
          // Refrescar lista de conversaciones en MessagesArea
          if (window.fetchMessages) window.fetchMessages();
          if (newId) {
            localStorage.setItem('current_conversation_id', newId);
            alert('Conversación creada: ' + newId);
          } else {
            alert('Conversación creada, pero no se pudo obtener el ID.');
          }
        } catch (err) {
          alert('Error al crear la conversación.');
        } finally {
          createBtn.disabled = false;
          createBtn.textContent = '+ Nueva conversación';
        }
      });
    }
    // --- Fix botón enviar: llamar directamente a la función de envío si existe ---
    const sendBtn = document.getElementById('sendBtn');
    const messageInput = document.getElementById('messageInput');
    if (sendBtn && messageInput) {
      sendBtn.addEventListener('click', (e) => {
        e.preventDefault();
        // Si existe window.sendMessageFromMessagesArea, úsala
        if (window.sendMessageFromMessagesArea) {
          const text = messageInput.value;
          messageInput.value = '';
          window.sendMessageFromMessagesArea(text);
        } else {
          // fallback: trigger Enter
          messageInput.dispatchEvent(new Event('change', { bubbles: true }));
        }
      });
    }
  });
</script>