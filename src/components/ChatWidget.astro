---
// Componente de chat tipo React, pero en Astro clásico con JS puro
---
<div class="chat-widget-container">
  <select id="conversationSelect" style="margin-bottom: 10px; width: 100%; max-width: 400px;"></select>
  <div class="chat-messages" id="chatMessages"></div>
  <form id="chatForm" class="chat-form">
    <input type="text" id="chatInput" placeholder="Escribe tu mensaje..." autocomplete="off" />
    <button type="submit" id="chatSendBtn">Enviar</button>
  </form>
</div>

<script type="module">
const chatMessages = document.getElementById('chatMessages');
const chatForm = document.getElementById('chatForm');
const chatInput = document.getElementById('chatInput');
const chatSendBtn = document.getElementById('chatSendBtn');
const conversationSelect = document.getElementById('conversationSelect');
let isLoading = false;
let messages = [];
let currentConversationId = '';

async function fetchConversations() {
  try {
    const res = await fetch('http://0.0.0.0:12000/conversation/list', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({})
    });
    const data = await res.json();
    let conversations = [];
    if (Array.isArray(data.result)) {
      conversations = data.result;
    } else if (Array.isArray(data)) {
      conversations = data;
    } else if (data.conversations && Array.isArray(data.conversations)) {
      conversations = data.conversations;
    }
    conversationSelect.innerHTML = '';
    if (conversations.length === 0) {
      conversationSelect.innerHTML = '<option value="">No hay conversaciones</option>';
      return;
    }
    conversationSelect.innerHTML = '<option value="">Selecciona una conversación</option>' +
      conversations.map(c => `<option value="${c.id || c.conversation_id}">${c.title || c.id || c.conversation_id}</option>`).join('');
    // Selección automática si hay una guardada
    const savedId = localStorage.getItem('current_conversation_id');
    if (savedId && conversations.some(c => (c.id || c.conversation_id) === savedId)) {
      conversationSelect.value = savedId;
      currentConversationId = savedId;
      await fetchMessagesForConversation(savedId);
    }
  } catch (e) {
    conversationSelect.innerHTML = '<option value="">Error cargando conversaciones</option>';
  }
}

async function fetchMessagesForConversation(conversationId) {
  if (!conversationId) {
    messages = [];
    renderMessages();
    return;
  }
  const res = await fetch('http://0.0.0.0:12000/message/list', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ params: conversationId })
  });
  const data = await res.json();
  if (data.result && Array.isArray(data.result)) {
    messages = data.result.map(m => ({
      text: (m.parts && m.parts.map(p => p.text).join(' ')) || '',
      isUser: m.role === 'user'
    }));
  } else {
    messages = [];
  }
  renderMessages();
}

function renderMessages() {
  chatMessages.innerHTML = '';
  messages.forEach(msg => {
    const div = document.createElement('div');
    div.className = 'chat-bubble ' + (msg.isUser ? 'user' : 'agent');
    div.textContent = msg.text;
    chatMessages.appendChild(div);
  });
  if (isLoading) {
    const loader = document.createElement('div');
    loader.className = 'chat-bubble agent';
    loader.innerHTML = '<span class="loader"></span> Procesando...';
    chatMessages.appendChild(loader);
  }
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

conversationSelect.addEventListener('change', async () => {
  const selectedId = conversationSelect.value;
  if (selectedId) {
    localStorage.setItem('current_conversation_id', selectedId);
    currentConversationId = selectedId;
    await fetchMessagesForConversation(selectedId);
  } else {
    localStorage.removeItem('current_conversation_id');
    currentConversationId = '';
    messages = [];
    renderMessages();
  }
});

chatForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  if (isLoading) return;
  const text = chatInput.value.trim();
  if (!text || !currentConversationId) return;
  messages.push({ text, isUser: true });
  chatInput.value = '';
  isLoading = true;
  renderMessages();
  try {
    const response = await fetch('http://0.0.0.0:12000/message/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        params: {
          role: 'user',
          parts: [{ type: 'text', text }],
          metadata: { conversation_id: currentConversationId }
        }
      })
    });
    let agentText = '';
    if (response.ok) {
      // Esperar a que el backend procese y devuelva la respuesta real
      await fetchMessagesForConversation(currentConversationId);
    } else {
      agentText = 'Error al obtener respuesta del agente.';
      messages.push({ text: agentText, isUser: false });
      renderMessages();
    }
  } catch (err) {
    messages.push({ text: 'Error de red al contactar al agente.', isUser: false });
    renderMessages();
  } finally {
    isLoading = false;
    renderMessages();
  }
});

// Inicialización
fetchConversations();

</script>

<style>
.chat-widget-container {
  max-width: 500px;
  margin: 0 auto;
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.08);
  display: flex;
  flex-direction: column;
  height: 600px;
}
.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 18px;
  background: #f7fafc;
  display: flex;
  flex-direction: column;
  gap: 12px;
}
.chat-bubble {
  max-width: 70%;
  padding: 12px 18px;
  border-radius: 16px;
  font-size: 1rem;
  word-break: break-word;
  margin-bottom: 2px;
}
.chat-bubble.user {
  align-self: flex-end;
  background: #667eea;
  color: #fff;
}
.chat-bubble.agent {
  align-self: flex-start;
  background: #e9e9f7;
  color: #222;
}
.chat-form {
  display: flex;
  border-top: 1px solid #e0e0e0;
  padding: 12px;
  gap: 8px;
}
#chatInput {
  flex: 1;
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 10px;
  font-size: 1rem;
}
#chatSendBtn {
  background: #667eea;
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 0 18px;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s;
}
#chatSendBtn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}
.loader {
  display: inline-block;
  width: 18px;
  height: 18px;
  border: 3px solid #e0e0e0;
  border-top: 3px solid #764ba2;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 8px;
  vertical-align: middle;
}
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>
