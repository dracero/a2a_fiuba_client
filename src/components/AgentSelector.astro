<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Selector de Agentes</title>
    <style>
        :root {
            --border-color: #e2e8f0;
            --card-bg: #ffffff;
            --text-primary: #1a202c;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f7fafc;
        }

        .agent-selector {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            background: rgba(255, 255, 255, 0.02);
            max-width: 500px;
            margin: 0 auto;
        }

        .agent-selector select {
            width: 100%;
            padding: 12px 16px;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            color: var(--text-primary);
            font-size: 1rem;
            backdrop-filter: blur(10px);
            outline: none;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .agent-selector select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
        }

        .status {
            margin-top: 15px;
            padding: 10px;
            border-radius: 8px;
            font-size: 0.9rem;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .status.show {
            opacity: 1;
        }

        .status.success {
            background: #f0fff4;
            color: #22543d;
            border: 1px solid #9ae6b4;
        }

        .status.error {
            background: #fed7d7;
            color: #742a2a;
            border: 1px solid #feb2b2;
        }

        .status.loading {
           // @ts-nocheck background: #ebf8ff;
            color: #2a4365;
            border: 1px solid #90cdf4;
        }
    </style>
</head>
<body>
    <div class="agent-selector">
        <select id="agentSelect">
            <option value="">ü§ñ Selecciona un agente...</option>
            <option value="general">ü§ñ Agente de F√≠sica</option>
            <option value="creative">üé® Agente Creativo</option>
            <option value="technical">‚ö° Agente T√©cnico</option>
            <option value="analyzer">üìä Analizador de Datos</option>
        </select>
        
        <div id="statusMessage" class="status"></div>
    </div>

    <script>
        const agents = [
            { id: '', name: 'Selecciona un agente...', icon: 'ü§ñ' },
            { id: 'general', name: 'Agente de F√≠sica', icon: 'ü§ñ' },
            { id: 'creative', name: 'Agente Creativo', icon: 'üé®' },
            { id: 'technical', name: 'Agente T√©cnico', icon: '‚ö°' },
            { id: 'analyzer', name: 'Analizador de Datos', icon: 'üìä' }
        ];

        // Mapeo de puertos para cada agente
        const agentPorts = {
            'general': '10003', // Agente de F√≠sica
            'creative': '10001',
            'technical': '10005',
            'analyzer': '10006'
        };
        function showStatus(message: string, type: string) {
            const statusElement = document.getElementById('statusMessage');
            if (statusElement) {
                statusElement.textContent = message;
                statusElement.className = `status ${type} show`;
                
                if (type !== 'loading') {
                    setTimeout(() => {
                        statusElement.classList.remove('show');
                    }, 3000);
                }
            }
        }

        async function registerAgent(agentId: keyof typeof agentPorts) {
            if (!agentId) return;

            const port = agentPorts[agentId];
            if (!port) {
                showStatus('Error: Puerto no configurado para este agente', 'error');
                return;
            }

            showStatus('Registrando agente...', 'loading');

            // Usar Headers y requestOptions como en el ejemplo del usuario
            const myHeaders = new window.Headers();
            myHeaders.append('Content-Type', 'application/json');
            const raw = JSON.stringify({
                "params": `localhost:${port}`
            });
            const requestOptions = {
                method: "POST",
                headers: myHeaders,
                body: raw,
                redirect: "follow"
            };

            try {
                const response = await window.fetch("http://0.0.0.0:12000/agent/register", requestOptions);
                const result = await response.text();
                if (response.ok) {
                    const agentName = agents.find(a => a.id === agentId)?.name || agentId;
                    showStatus(`‚úÖ ${agentName} registrado exitosamente`, 'success');
                    console.log('Registro exitoso:', result);
                } else {
                    showStatus(`‚ùå Error al registrar agente: ${response.status}`, 'error');
                    console.error('Error de respuesta:', result);
                }
            } catch (error) {
                showStatus('‚ùå Error de conexi√≥n al registrar agente', 'error');
                console.error('Error:', error);
            }
        }

        // Event listener para el cambio de selecci√≥n
        const agentSelectElement = document.getElementById('agentSelect');
        if (agentSelectElement) {
            agentSelectElement.addEventListener('change', function(event) {
                const target = event.target;
                const selectedAgent = (target && 'value' in target) ? target.value : '';
                
                if (selectedAgent) {
                    console.log('Agente seleccionado:', selectedAgent);
                    registerAgent(selectedAgent);
                } else {
                    // Limpiar mensaje de estado cuando se selecciona la opci√≥n vac√≠a
                    const statusElement = document.getElementById('statusMessage');
                    if (statusElement) {
                        statusElement.classList.remove('show');
                    }
                }
            });
        }
    </script>
</body>
</html>